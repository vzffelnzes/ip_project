import logging
import asyncio
import aiohttp
from aiogram import Bot, Dispatcher, Router
from aiogram.filters import Command
from aiogram.types import Message
from database import init_db, add_word_to_db, get_all_banned_words, delete_word_from_db, clear_database
from datetime import datetime, timedelta
from collections import defaultdict


logging.basicConfig(level=logging.INFO)

TOKEN = "7918677372:AAHwcJrckxibqT70loqS8Q5XP3WRi7QpfZI"

# Yandex API –∫–ª—é—á–∏
YANDEX_API_KEY = "AQVNwQd4okK1MAXU82jebu7DR3ub5pMeVlRllu5Z"
YANDEX_API_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()
banned_words = set(get_all_banned_words())

bot = Bot(token=TOKEN)
router = Router()
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
chat_settings = defaultdict(lambda: {
    'spam_detection': False,
    'violations': defaultdict(int)
})


async def is_admin(chat_id: int, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞"""
    try:
        chat_member = await bot.get_chat_member(chat_id, user_id)
        return chat_member.status in ["administrator", "creator"]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False


async def send_temporary_message(chat_id: int, text: str, delay: int = 3):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    sent_message = await bot.send_message(chat_id, text)
    await asyncio.sleep(delay)
    await bot.delete_message(chat_id, sent_message.message_id)


async def delete_command_message(message: Message, delay: int = 20):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
    await asyncio.sleep(delay)
    await bot.delete_message(message.chat.id, message.message_id)


async def handle_violation(message: Message, reason: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—Ä—É—à–µ–Ω–∏–µ –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –º–µ—Ä—ã (1-–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: —Ç–∞–π–º-–∞—É—Ç 24—á, 2-–µ: –±–∞–Ω)"""
    chat_id = message.chat.id
    user_id = message.from_user.id

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞—Ä—É—à–µ–Ω–∏–π
    violations_count = chat_settings[chat_id]['violations'][user_id] + 1
    chat_settings[chat_id]['violations'][user_id] = violations_count

    try:
        await message.delete()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –ü–µ—Ä–≤–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ - —Ç–∞–π–º-–∞—É—Ç –Ω–∞ 24 —á–∞—Å–∞
    if violations_count == 1:
        timeout_duration = 24 * 60  # 24 —á–∞—Å–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
        until_date = datetime.now() + timedelta(minutes=timeout_duration)
        try:
            await bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=user_id,
                permissions={"can_send_messages": False},
                until_date=until_date
            )
            await send_temporary_message(
                chat_id,
                f"‚ö†Ô∏è {reason}\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —Ç–∞–π–º-–∞—É—Ç –Ω–∞ 24 —á–∞—Å–∞!\n"
                f"–°–ª–µ–¥—É—é—â–µ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: –±–∞–Ω"
            )
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –ø–æ–ª—É—á–∏–ª —Ç–∞–π–º-–∞—É—Ç –Ω–∞ 24 —á–∞—Å–∞")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Ç–∞–π–º-–∞—É—Ç–∞: {e}")

    # –í—Ç–æ—Ä–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ - –±–∞–Ω
    elif violations_count >= 2:
        try:
            await bot.ban_chat_member(chat_id=chat_id, user_id=user_id)
            await send_temporary_message(
                chat_id,
                f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –∑–∞–±–∞–Ω–µ–Ω!\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ ({reason})"
            )
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –∑–∞–±–∞–Ω–µ–Ω –∑–∞ 2 –Ω–∞—Ä—É—à–µ–Ω–∏—è")
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø–æ—Å–ª–µ –±–∞–Ω–∞
            chat_settings[chat_id]['violations'][user_id] = 0
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –±–∞–Ω–∞: {e}")


# –ö–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏
@router.message(Command("cleardb"))
async def clear_db_command(message: Message):
    asyncio.create_task(delete_command_message(message))
    if not await is_admin(message.chat.id, message.from_user.id):
        await send_temporary_message(message.chat.id, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    try:
        clear_database()
        global banned_words
        banned_words = set()
        await send_temporary_message(message.chat.id, "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞")
    except Exception as e:
        await send_temporary_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")


"""@router.message(Command("timeout"))
async def timeout_user(message: Message):
    asyncio.create_task(delete_command_message(message))
    if not await is_admin(message.chat.id, message.from_user.id):
        await send_temporary_message(message.chat.id, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    if not message.reply_to_message:
        await send_temporary_message(message.chat.id, "‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    args = message.text.split()
    if len(args) < 2:
        await send_temporary_message(message.chat.id,
                                     "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞–π–º-–∞—É—Ç–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö. –ü—Ä–∏–º–µ—Ä: /timeout 10")
        return
    try:
        timeout_duration = int(args[1])
        until_date = datetime.now() + timedelta(minutes=timeout_duration)
    except ValueError:
        await send_temporary_message(message.chat.id, "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–∞–π–º-–∞—É—Ç–∞")
        return
    user_to_timeout = message.reply_to_message.from_user.id
    try:
        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=user_to_timeout,
            permissions={"can_send_messages": False},
            until_date=until_date
        )
        await send_temporary_message(
            message.chat.id,
            f"‚è≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.full_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–∞–π–º-–∞—É—Ç –Ω–∞ {timeout_duration} –º–∏–Ω."
        )
    except Exception as e:
        await send_temporary_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–∞–π–º-–∞—É—Ç–µ: {e}")"""


@router.message(Command("untimeout"))
async def untimeout_user(message: Message):
    asyncio.create_task(delete_command_message(message))
    if not await is_admin(message.chat.id, message.from_user.id):
        await send_temporary_message(message.chat.id, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    if not message.reply_to_message:
        await send_temporary_message(message.chat.id, "‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    user_to_untimeout = message.reply_to_message.from_user.id
    try:
        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=user_to_untimeout,
            permissions={
                "can_send_messages": True,
                "can_send_media_messages": True,
                "can_send_polls": True,
                "can_send_other_messages": True,
                "can_add_web_page_previews": True,
                "can_change_info": False,
                "can_invite_users": False,
                "can_pin_messages": False,
            }
        )
        await send_temporary_message(
            message.chat.id,
            f"‚úÖ –° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.reply_to_message.from_user.full_name} —Å–Ω—è—Ç —Ç–∞–π–º-–∞—É—Ç"
        )
    except Exception as e:
        await send_temporary_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Ç–∞–π–º-–∞—É—Ç–∞: {e}")


@router.message(Command("togglespam"))
async def toggle_spam_detection(message: Message):
    asyncio.create_task(delete_command_message(message))
    if not await is_admin(message.chat.id, message.from_user.id):
        await send_temporary_message(message.chat.id, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    chat_id = message.chat.id
    current_state = chat_settings[chat_id]['spam_detection']
    chat_settings[chat_id]['spam_detection'] = not current_state

    state = "‚úÖ –≤–∫–ª—é—á–µ–Ω" if chat_settings[chat_id]['spam_detection'] else "‚ùå –≤—ã–∫–ª—é—á–µ–Ω"
    await send_temporary_message(chat_id, f"–†–µ–∂–∏–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–ø–∞–º–∞ {state} –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞")


@router.message(Command("spamstatus"))
async def spam_status(message: Message):
    asyncio.create_task(delete_command_message(message))
    chat_id = message.chat.id
    state = "‚úÖ –≤–∫–ª—é—á–µ–Ω" if chat_settings.get(chat_id, {}).get('spam_detection', False) else "‚ùå –≤—ã–∫–ª—é—á–µ–Ω"
    await send_temporary_message(chat_id, f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–ø–∞–º-—Ñ–∏–ª—å—Ç—Ä–∞: {state}")


@router.message(Command("del"))
async def delete_message_command(message: Message):
    asyncio.create_task(delete_command_message(message))
    if not await is_admin(message.chat.id, message.from_user.id):
        await send_temporary_message(message.chat.id, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    if not message.reply_to_message:
        await send_temporary_message(message.chat.id, "‚ö†Ô∏è –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å")
        return
    try:
        await bot.delete_message(message.chat.id, message.reply_to_message.message_id)
        await send_temporary_message(message.chat.id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
    except Exception as e:
        await send_temporary_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")


@router.message(Command("addword"))
async def add_banned_word(message: Message):
    asyncio.create_task(delete_command_message(message))
    if not await is_admin(message.chat.id, message.from_user.id):
        await send_temporary_message(message.chat.id, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    if len(message.text.split()) < 2:
        await send_temporary_message(message.chat.id, "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö")
        return
    new_word = message.text.split(maxsplit=1)[1].lower()
    if new_word in banned_words:
        await send_temporary_message(message.chat.id, f"‚ö†Ô∏è –°–ª–æ–≤–æ '{new_word}' —É–∂–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ")
        return
    banned_words.add(new_word)
    add_word_to_db(new_word)
    await send_temporary_message(message.chat.id, f"‚úÖ –°–ª–æ–≤–æ '{new_word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö")


@router.message(Command("delword"))
async def delete_banned_word(message: Message):
    asyncio.create_task(delete_command_message(message))
    if not await is_admin(message.chat.id, message.from_user.id):
        await send_temporary_message(message.chat.id, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    if len(message.text.split()) < 2:
        await send_temporary_message(message.chat.id, "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö")
        return
    word_to_delete = message.text.split(maxsplit=1)[1].lower()
    if word_to_delete not in banned_words:
        await send_temporary_message(message.chat.id, f"‚ö†Ô∏è –°–ª–æ–≤–æ '{word_to_delete}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö")
        return
    banned_words.remove(word_to_delete)
    delete_word_from_db(word_to_delete)
    await send_temporary_message(message.chat.id, f"‚úÖ –°–ª–æ–≤–æ '{word_to_delete}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö")


@router.message(Command("kick"))
async def kick_user(message: Message):
    asyncio.create_task(delete_command_message(message))
    if not await is_admin(message.chat.id, message.from_user.id):
        await send_temporary_message(message.chat.id, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    if not message.reply_to_message:
        await send_temporary_message(message.chat.id, "‚ö†Ô∏è –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–∏–∫–∞")
        return
    user_to_kick = message.reply_to_message.from_user.id
    try:
        await bot.ban_chat_member(chat_id=message.chat.id, user_id=user_to_kick)
        await bot.unban_chat_member(chat_id=message.chat.id, user_id=user_to_kick)
        await send_temporary_message(
            message.chat.id,
            f"üë¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.full_name} –±—ã–ª –∫–∏–∫–Ω—É—Ç"
        )
    except Exception as e:
        await send_temporary_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –∫–∏–∫–∞: {e}")


@router.message(Command("ban"))
async def ban_user(message: Message):
    asyncio.create_task(delete_command_message(message))
    if not await is_admin(message.chat.id, message.from_user.id):
        await send_temporary_message(message.chat.id, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    if not message.reply_to_message:
        await send_temporary_message(message.chat.id, "‚ö†Ô∏è –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞")
        return
    user_to_ban = message.reply_to_message.from_user.id
    try:
        await bot.ban_chat_member(chat_id=message.chat.id, user_id=user_to_ban)
        await send_temporary_message(
            message.chat.id,
            f"üî® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.full_name} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω"
        )
    except Exception as e:
        await send_temporary_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –±–∞–Ω–∞: {e}")


@router.message(Command("unban"))
async def unban_user(message: Message):
    asyncio.create_task(delete_command_message(message))
    if not await is_admin(message.chat.id, message.from_user.id):
        await send_temporary_message(message.chat.id, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    if not message.reply_to_message:
        await send_temporary_message(message.chat.id, "‚ö†Ô∏è –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞")
        return
    user_to_unban = message.reply_to_message.from_user.id
    try:
        await bot.unban_chat_member(chat_id=message.chat.id, user_id=user_to_unban)
        await send_temporary_message(
            message.chat.id,
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.full_name} –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω"
        )
    except Exception as e:
        await send_temporary_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–∞–Ω–∞: {e}")


@router.message()
async def filter_messages(message: Message):
    chat_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    if hasattr(message, 'text') and message.text:
        for word in banned_words:
            if word in message.text.lower():
                await handle_violation(message, f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: '{word}'")
                return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞)
    if chat_settings[chat_id]['spam_detection'] and hasattr(message, 'text') and message.text:
        try:
            async with aiohttp.ClientSession() as session:
                prompt = {
                    "modelUri": "gpt://b1gus2jr27on3b7n6gpj/yandexgpt-lite",
                    "completionOptions": {
                        "stream": False,
                        "temperature": 0.6,
                        "maxTokens": 2000,
                    },
                    "messages": [
                        {
                            "role": "system",
                            "text": (
                                f"–û—Ç–≤–µ—Ç—å '–¥–∞' –µ—Å–ª–∏ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —Ä–µ–∫–ª–∞–º–æ–π, —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –±—Ä–∞–Ω—å –∏–ª–∏ "
                                f"—Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ –∏–ª–∏ –∫–∞–∫—É—é-–ª–∏–±–æ —Ä–µ–∫–ª–∞–º—É. –í–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}"
                            )
                        }
                    ]
                }
                headers = {
                    "Content-Type": "application/json",
                    "Authorization": f"Api-Key {YANDEX_API_KEY}"
                }
                async with session.post(YANDEX_API_URL, headers=headers, json=prompt) as response:
                    if response.status == 200:
                        result = await response.json()
                        if "–¥–∞" in result['result']['alternatives'][0]['message']['text'].lower():
                            await handle_violation(message, "–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º")
                    else:
                        logging.error(f"–û—à–∏–±–∫–∞ Yandex API: {response.status} - {await response.text()}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–ø–∞–º–∞: {e}")


async def main():
    dp.include_router(router)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")